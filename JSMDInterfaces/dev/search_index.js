var documenterSearchIndex = {"docs":
[{"location":"interfaces/Math/#Math","page":"Math","title":"Math","text":"","category":"section"},{"location":"interfaces/Math/","page":"Math","title":"Math","text":"Modules = [JSMDInterfaces.Math]","category":"page"},{"location":"interfaces/Math/#JSMDInterfaces.Math.AbstractInterpolationMethod","page":"Math","title":"JSMDInterfaces.Math.AbstractInterpolationMethod","text":"AbstractInterpolationMethod\n\nAbstract type representing any interpolation method.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Math/#JSMDInterfaces.Math.interpolate-Tuple{JSMDInterfaces.Math.AbstractInterpolationMethod, Any}","page":"Math","title":"JSMDInterfaces.Math.interpolate","text":"interpolate(::AbstractInterpolationMethod, x)\n\nAbstract interpolator call method.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"interfaces/Models/","page":"Models","title":"Models","text":"Modules = [JSMDInterfaces.Models]","category":"page"},{"location":"interfaces/Models/#JSMDInterfaces.Models.AbstractJSMDModel","page":"Models","title":"JSMDInterfaces.Models.AbstractJSMDModel","text":"AbstractJSMDModel\n\nBasic abstract type for every JSMD compatible model. \n\n\n\n\n\n","category":"type"},{"location":"interfaces/Models/#JSMDInterfaces.Models.AbstractJSMDModelData","page":"Models","title":"JSMDInterfaces.Models.AbstractJSMDModelData","text":"AbstractJSMDModelData\n\nBasic abstract type for every JSMD compatible model data. \n\nJSMD ModelData types are the interface of the JSMD environment with the external world,  and are meant to provide a model agnostic interface to any customly formatted file.\n\nThe main objective of this data type is to create a JSMD simulation compatible Model  by means of the parse_model interface.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Models/#JSMDInterfaces.Models.dump_model-Union{Tuple{N}, Tuple{JSMDInterfaces.Models.AbstractJSMDModel, N, Vararg{Any}}} where N<:JSMDInterfaces.FilesIO.AbstractArchiveNode","page":"Models","title":"JSMDInterfaces.Models.dump_model","text":"dump_model(::AbstractJSMDModel, ::N, args...; \n    kargs...) where {N <: AbstractArchiveNode}\n\nThis function serves as an interface to dump to an archive node a JSMD compatible model.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Models/#JSMDInterfaces.Models.load_model-Union{Tuple{N}, Tuple{T}, Tuple{Type{T}, Type{<:JSMDInterfaces.Models.AbstractJSMDModel}, N, Vararg{Any}}} where {T, N<:JSMDInterfaces.FilesIO.AbstractArchiveNode}","page":"Models","title":"JSMDInterfaces.Models.load_model","text":"load_model(::Type{T}, ::Type{ <: AbstractJSMDModel}, ::N, \n    args...; kargs...) where {T, N <: AbstractArchiveNode}\n\nThis function serves as an interface to load from an archive node a JSMD compatible model.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Models/#JSMDInterfaces.Models.parse_data-Union{Tuple{D}, Tuple{T}, Tuple{Type{T}, Type{D}, AbstractString}} where {T, D<:JSMDInterfaces.Models.AbstractJSMDModelData}","page":"Models","title":"JSMDInterfaces.Models.parse_data","text":"parse_data(::Type{T}, ::Type{D}, ::AbstractString; \n    kargs...) where {T, D <: AbstractJSMDModelData} end\n\nThis function serves as an interface to create a JSMD compatible  model data object from a file.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Models/#JSMDInterfaces.Models.parse_model-Union{Tuple{M}, Tuple{D}, Tuple{T}, Tuple{Type{T}, Type{M}, Type{D}, Vararg{Any}}} where {T, D<:JSMDInterfaces.Models.AbstractJSMDModelData, M<:JSMDInterfaces.Models.AbstractJSMDModel}","page":"Models","title":"JSMDInterfaces.Models.parse_model","text":"parse_model(::Type{T}, ::Type{M}, ::Type{D}, args...; \n    kargs...) where {T, D <: AbstractJSMDModelData, M <: AbstractJSMDModel}\n\nThis function serves as an interface to create a JSMD compatible  model type from a ModelData type.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Frames/#Frames","page":"Frames","title":"Frames","text":"","category":"section"},{"location":"interfaces/Frames/","page":"Frames","title":"Frames","text":"Modules = [JSMDInterfaces.Frames]","category":"page"},{"location":"interfaces/Frames/#JSMDInterfaces.Frames.AbstractJSMDFrameGraph","page":"Frames","title":"JSMDInterfaces.Frames.AbstractJSMDFrameGraph","text":"AbstractJSMDFrameGraph\n\nAbstract type for frames graphs.  Subtype it to create a new frames graph compatible with the ecosystem.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Frames/#JSMDInterfaces.Frames.rotation12-Tuple{JSMDInterfaces.Frames.AbstractJSMDFrameGraph, Int64, Int64, Number}","page":"Frames","title":"JSMDInterfaces.Frames.rotation12","text":"rotation12(model::F, from::Int, to::Int, time::Number)\n\nThis function serves as an interface for constructing a rotation matrix, its first, second and third  derivative between two axes within a frame graph model.\n\nArguments\n\nmodel::F: An instance of a subtype of AbstractJSMDFrameGraph, representing the frame graph model.\nfrom::Int: The source node or axis for the rotation matrix.\nto::Int: The destination node or axis for the rotation matrix.\ntime::T: The independent variable (time), in seconds since J2000.\n\nwarning: Warning\nConcrete implementations of AbstractJSMDFrameGraph must provide this function!\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Frames/#JSMDInterfaces.Frames.rotation3-Tuple{JSMDInterfaces.Frames.AbstractJSMDFrameGraph, Int64, Int64, Number}","page":"Frames","title":"JSMDInterfaces.Frames.rotation3","text":"rotation3(model::F, from::Int, to::Int, time::Number)\n\nThis function serves as an interface for constructing a rotation matrix between two axes within  a frame graph model.\n\nArguments\n\nmodel::F: An instance of a subtype of AbstractJSMDFrameGraph, representing the frame graph model.\nfrom::Int: The source node or axis for the rotation matrix.\nto::Int: The destination node or axis for the rotation matrix.\ntime::T: The independent variable (time), in seconds since J2000.\n\nwarning: Warning\nConcrete implementations of AbstractJSMDFrameGraph must provide this function!\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Frames/#JSMDInterfaces.Frames.rotation6-Tuple{JSMDInterfaces.Frames.AbstractJSMDFrameGraph, Int64, Int64, Number}","page":"Frames","title":"JSMDInterfaces.Frames.rotation6","text":"rotation6(model::F, from::Int, to::Int, time::Number)\n\nThis function serves as an interface for constructing a rotation matrix and its first derivative  between two axes within a frame graph model.\n\nArguments\n\nmodel::F: An instance of a subtype of AbstractJSMDFrameGraph, representing the frame graph model.\nfrom::Int: The source node or axis for the rotation matrix.\nto::Int: The destination node or axis for the rotation matrix.\ntime::T: The independent variable (time), in seconds since J2000.\n\nwarning: Warning\nConcrete implementations of AbstractJSMDFrameGraph must provide this function!\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Frames/#JSMDInterfaces.Frames.rotation9-Tuple{JSMDInterfaces.Frames.AbstractJSMDFrameGraph, Int64, Int64, Number}","page":"Frames","title":"JSMDInterfaces.Frames.rotation9","text":"rotation9(model::F, from::Int, to::Int, time::Number)\n\nThis function serves as an interface for constructing a rotation matrix, its first, second  derivative between two axes within a frame graph model.\n\nArguments\n\nmodel::F: An instance of a subtype of AbstractJSMDFrameGraph, representing the frame graph model.\nfrom::Int: The source node or axis for the rotation matrix.\nto::Int: The destination node or axis for the rotation matrix.\ntime::T: The independent variable (time), in seconds since J2000.\n\nwarning: Warning\nConcrete implementations of AbstractJSMDFrameGraph must provide this function!\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Frames/#JSMDInterfaces.Frames.vector12-Tuple{JSMDInterfaces.Frames.AbstractJSMDFrameGraph, Int64, Int64, Int64, Number}","page":"Frames","title":"JSMDInterfaces.Frames.vector12","text":"vector12(model::F, from::Int, to::Int, axis::Int, time::Number)\n\nThis function serves as an interface for constructing a position, velocity, acceleration, and jerk vector  using a frame graph model.\n\nArguments\n\nmodel::F: An instance of a subtype of AbstractJSMDFrameGraph, representing the frame graph model.\nfrom::Int: The source node or point for the vector.\nto::Int: The destination node or point for the vector.\naxis::Int: The specific axis of the vector.\ntime::T: The independent variable (time), in seconds since J2000.\n\nwarning: Warning\nConcrete implementations of AbstractJSMDFrameGraph must provide this function!\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Frames/#JSMDInterfaces.Frames.vector3-Tuple{JSMDInterfaces.Frames.AbstractJSMDFrameGraph, Int64, Int64, Int64, Number}","page":"Frames","title":"JSMDInterfaces.Frames.vector3","text":"vector3(model::F, from::Int, to::Int, axis::Int, time::Number)\n\nThis function serves as an interface for constructing a position vector using a frame graph model.\n\nArguments\n\nmodel::F: An instance of a subtype of AbstractJSMDFrameGraph, representing the frame graph model.\nfrom::Int: The source node or point for the vector.\nto::Int: The destination node or point for the vector.\naxis::Int: The specific axis of the vector.\ntime::T: The independent variable (time), in seconds since J2000.\n\nwarning: Warning\nConcrete implementations of AbstractJSMDFrameGraph must provide this function!\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Frames/#JSMDInterfaces.Frames.vector6-Tuple{JSMDInterfaces.Frames.AbstractJSMDFrameGraph, Int64, Int64, Int64, Number}","page":"Frames","title":"JSMDInterfaces.Frames.vector6","text":"vector6(model::F, from::Int, to::Int, axis::Int, time::Number)\n\nThis function serves as an interface for constructing a position and velocity vector using a frame graph model.\n\nArguments\n\nmodel::F: An instance of a subtype of AbstractJSMDFrameGraph, representing the frame graph model.\nfrom::Int: The source node or point for the vector.\nto::Int: The destination node or point for the vector.\naxis::Int: The specific axis of the vector.\ntime::T: The independent variable (time), in seconds since J2000.\n\nwarning: Warning\nConcrete implementations of AbstractJSMDFrameGraph must provide this function!\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Frames/#JSMDInterfaces.Frames.vector9-Tuple{JSMDInterfaces.Frames.AbstractJSMDFrameGraph, Int64, Int64, Int64, Number}","page":"Frames","title":"JSMDInterfaces.Frames.vector9","text":"vector9(model::F, from::Int, to::Int, axis::Int, time::Number)\n\nThis function serves as an interface for constructing a position, velocity, and acceleration vector  using a frame graph model.\n\nArguments\n\nmodel::F: An instance of a subtype of AbstractJSMDFrameGraph, representing the frame graph model.\nfrom::Int: The source node or point for the vector.\nto::Int: The destination node or point for the vector.\naxis::Int: The specific axis of the vector.\ntime::T: The independent variable (time), in seconds since J2000.\n\nwarning: Warning\nConcrete implementations of AbstractJSMDFrameGraph must provide this function!\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"interfaces/Interface/","page":"Interface","title":"Interface","text":"Modules = [JSMDInterfaces.Interface]","category":"page"},{"location":"interfaces/Interface/#JSMDInterfaces.Interface.@interface-Tuple{Any}","page":"Interface","title":"JSMDInterfaces.Interface.@interface","text":"@interface\n\nThis macro can be used to create a in interface function within the  JSMD ecosystem. \n\nInterface functions are intended as functions with some abstract  types as inputs throwing a NotImplementedError as default behaviour.\n\n\n\n\n\n","category":"macro"},{"location":"interfaces/FilesIO/#FilesIO","page":"FilesIO","title":"FilesIO","text":"","category":"section"},{"location":"interfaces/FilesIO/","page":"FilesIO","title":"FilesIO","text":"Modules = [JSMDInterfaces.FilesIO]","category":"page"},{"location":"interfaces/FilesIO/#JSMDInterfaces.FilesIO.filepath","page":"FilesIO","title":"JSMDInterfaces.FilesIO.filepath","text":"filepath(files::AbstractFile, idx::Int=1)\n\nReturn the path of the idx-th file within files. \n\n\n\n\n\n","category":"function"},{"location":"interfaces/FilesIO/#JSMDInterfaces.FilesIO.filepaths-Tuple{JSMDInterfaces.FilesIO.AbstractFile}","page":"FilesIO","title":"JSMDInterfaces.FilesIO.filepaths","text":"filepaths(files::AbstractFile)\n\nReturn the path of all the files loaded within file.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/FilesIO/#JSMDInterfaces.FilesIO.load-Tuple{JSMDInterfaces.FilesIO.AbstractArchiveNode}","page":"FilesIO","title":"JSMDInterfaces.FilesIO.load","text":"function load(::AbstractArchiveNode)\n\nGeneric loader for JSMD archive nodes.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/FilesIO/#JSMDInterfaces.FilesIO.load-Tuple{JSMDInterfaces.FilesIO.AbstractFile}","page":"FilesIO","title":"JSMDInterfaces.FilesIO.load","text":"load(files::T) where T <: AbstractFile\n\nGeneric loader of different file/s formats.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/FilesIO/#JSMDInterfaces.FilesIO.@filetype-Tuple{Any, Any}","page":"FilesIO","title":"JSMDInterfaces.FilesIO.@filetype","text":"filetype(ftype, suptype)\n\nCreate a type representing a specific file and the associated  filepaths and filepath implementations.\n\n\n\n\n\n","category":"macro"},{"location":"interfaces/Graphs/#Graph","page":"Graph","title":"Graph","text":"","category":"section"},{"location":"interfaces/Graphs/","page":"Graph","title":"Graph","text":"Modules = [JSMDInterfaces.Graph]","category":"page"},{"location":"interfaces/Graphs/#JSMDInterfaces.Graph.AbstractJSMDGraph","page":"Graph","title":"JSMDInterfaces.Graph.AbstractJSMDGraph","text":"AbstractJSMDGraph{T}\n\nAbstract type for graphs.  Subtype it to create graphs compatible with the JSMD ecosystem.\n\nGraphs here could be compatible with both JSMD ecosystem and Graphs.jl:\n\nFor JSMD compatibility, see also: get_path.\nFor Graphs.jl compatibility, see also: Graphs.jl interface\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Graphs/#JSMDInterfaces.Graph.AbstractJSMDGraphNode","page":"Graph","title":"JSMDInterfaces.Graph.AbstractJSMDGraphNode","text":"AbstractJSMDGraphNode\n\nAbstract type for graph nodes.  Subtype it to create a node graph compatible with the JSMD ecosystem.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Graphs/#Graphs.SimpleGraphs.add_edge!-Tuple{JSMDInterfaces.Graph.AbstractJSMDGraph, Int64, Int64, Int64}","page":"Graph","title":"Graphs.SimpleGraphs.add_edge!","text":"add_edge!(g::AbstractJSMDGraph, from::Int, to::Int, cost::Int)\n\nThis function add an edge between from and to with weight cost.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Graphs/#Graphs.SimpleGraphs.add_vertex!-Union{Tuple{N}, Tuple{JSMDInterfaces.Graph.AbstractJSMDGraph, N}} where N<:JSMDInterfaces.Graph.AbstractJSMDGraphNode","page":"Graph","title":"Graphs.SimpleGraphs.add_vertex!","text":"add_node!(g::AbstractJSMDGraph, vertex::AbstractJSMDGraphNode)\n\nThis function adds vertex to the graph g.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Graphs/#Graphs.has_path-Tuple{JSMDInterfaces.Graph.AbstractJSMDGraph, Int64, Int64}","page":"Graph","title":"Graphs.has_path","text":"has_path(g::AbstractJSMDGraph, from::Int, to::Int)\n\nReturn true if there is a path between from and to in the graph g.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Graphs/#JSMDInterfaces.Graph.get_path-Tuple{JSMDInterfaces.Graph.AbstractJSMDGraph, Int64, Int64}","page":"Graph","title":"JSMDInterfaces.Graph.get_path","text":"get_path(g::AbstractJSMDGraph, from::Int, to::Int)\n\nGet the nodes on hte path between and including from' andto. Returns an empty array if  eitherfromortoare not part ofg` or if there is no path between them.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Ephemeris/#Ephemeris","page":"Ephemeris","title":"Ephemeris","text":"","category":"section"},{"location":"interfaces/Ephemeris/","page":"Ephemeris","title":"Ephemeris","text":"Modules = [JSMDInterfaces.Ephemeris]","category":"page"},{"location":"interfaces/Ephemeris/#JSMDInterfaces.Ephemeris.AbstractEphemerisProvider","page":"Ephemeris","title":"JSMDInterfaces.Ephemeris.AbstractEphemerisProvider","text":"AbstractEphemerisProvider\n\nAbstract type to represent ephemeris types.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Ephemeris/#JSMDInterfaces.Ephemeris.EphemAxesRecord","page":"Ephemeris","title":"JSMDInterfaces.Ephemeris.EphemAxesRecord","text":"EphemAxesRecord\n\nStore an orientation record metadata.\n\nFields\n\ntarget – NAIF ID of the target axes.\njd_start – Julian date of the first time.\njd_end – Julian date of the last time.\naxes – NAIF ID of the reference axes.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Ephemeris/#JSMDInterfaces.Ephemeris.EphemPointRecord","page":"Ephemeris","title":"JSMDInterfaces.Ephemeris.EphemPointRecord","text":"EphemPointRecord\n\nStore a position record metadata.\n\nFields\n\ntarget – NAIF ID of the target point.\ncenter – NAIF ID of the center point.\njd_start – Julian date of the first time.\njd_end – Julian date of the last time.\naxes – NAIF ID of the reference axes.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Ephemeris/#JSMDInterfaces.Ephemeris.EphemerisError","page":"Ephemeris","title":"JSMDInterfaces.Ephemeris.EphemerisError","text":"JSMDInterfaces.Ephemeris.EphemerisError\n\nA type representing ephemeris load or computations errors.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Ephemeris/#JSMDInterfaces.Ephemeris.ephem_compute!-Tuple{Any, JSMDInterfaces.Ephemeris.AbstractEphemerisProvider, Number, Number, Int64, Int64, Int64}","page":"Ephemeris","title":"JSMDInterfaces.Ephemeris.ephem_compute!","text":"ephem_compute!(res, eph::AbstractEphemerisProvider, jd0::Number, time::Number, \n    target::Int, center::Int, order::Int)\n\nAbstract method to compute position and derivatives up to order of target with  respect to center at the Julian Date jd0 + time.\n\nInputs\n\neph – Ephemeris provider.\njd0, time – jd0 + time must be equal to the Julian Day for the time coordinate    corresponding to the ephemeris. \ntarget – The body or reference point whose coordinates are required. \ncenter – The origin of the coordinate system. \norder – The order of derivatives from 0 (position) to 3 (position, velocity,    acceleration and jerk).\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Ephemeris/#JSMDInterfaces.Ephemeris.ephem_orient!-Tuple{Any, JSMDInterfaces.Ephemeris.AbstractEphemerisProvider, Number, Number, Int64, Int64, Int64}","page":"Ephemeris","title":"JSMDInterfaces.Ephemeris.ephem_orient!","text":"ephem_orient!(res, eph::AbstractEphemerisProvider, jd0::Number, time::Number, \n    target::Int, center::Int, order::Int)\n\nAbstract method to compute Euler angles and derivatives up to order for the orientation of  the target axes at epoch jd0 + time.\n\nInputs\n\neph – Ephemeris provider.\njd0, time – jd0 + time must be equal to the Julian Day for the time coordinate    corresponding to the ephemeris. \ntarget – The axes whose orientation is required.\ncenter – The parent set of axes.\norder – The order of derivatives from 0 (angles) to 3 (angles, angles rate, etc...).\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Ephemeris/#JSMDInterfaces.FilesIO.load-Tuple{Type{<:JSMDInterfaces.Ephemeris.AbstractEphemerisProvider}, Any}","page":"Ephemeris","title":"JSMDInterfaces.FilesIO.load","text":"load(::Type{<:AbstractEphemerisProvider}, files)\n\nLoad ephemeris files.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/Errors/#Errors","page":"Errors","title":"Errors","text":"","category":"section"},{"location":"interfaces/Errors/","page":"Errors","title":"Errors","text":"Modules = [JSMDInterfaces.Errors]","category":"page"},{"location":"interfaces/Errors/#JSMDInterfaces.Errors.AbstractGenericException","page":"Errors","title":"JSMDInterfaces.Errors.AbstractGenericException","text":"AbstractGenericException\n\nA supertype for all ecosystem related errors.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Errors/#JSMDInterfaces.Errors.GenericError","page":"Errors","title":"JSMDInterfaces.Errors.GenericError","text":"JSMDInterfaces.Errors.GenericError\n\nA type representing generic errors.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Errors/#JSMDInterfaces.Errors.NotImplementedError","page":"Errors","title":"JSMDInterfaces.Errors.NotImplementedError","text":"JSMDInterfaces.Errors.NotImplementedError\n\nA type representing not implemented errors.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/Errors/#JSMDInterfaces.Errors.@custom_error-Tuple{Any}","page":"Errors","title":"JSMDInterfaces.Errors.@custom_error","text":"@custom_error\n\nCreate a type representing a custom error type.\n\n\n\n\n\n","category":"macro"},{"location":"#JSMDInterfaces.jl","page":"Home","title":"JSMDInterfaces.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An interface-only package for the JSMD ecosystem","category":"page"},{"location":"","page":"Home","title":"Home","text":"JSMDInterfacesUtils.jl handles all the interface definitions for the JSMD ecosystem. It is a low-level and low dependency library made to be  depended on by the higher-level libraries to supply a common interface.","category":"page"}]
}
