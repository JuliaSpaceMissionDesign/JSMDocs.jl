var documenterSearchIndex = {"docs":
[{"location":"interfaces/#Errors","page":"Interfaces","title":"Errors","text":"","category":"section"},{"location":"interfaces/","page":"Interfaces","title":"Interfaces","text":"Modules = [JSMDInterfaces.Errors]","category":"page"},{"location":"interfaces/#JSMDInterfaces.Errors.AbstractGenericException","page":"Interfaces","title":"JSMDInterfaces.Errors.AbstractGenericException","text":"AbstractGenericException\n\nA supertype for all ecosystem related errors.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#JSMDInterfaces.Errors.GenericError","page":"Interfaces","title":"JSMDInterfaces.Errors.GenericError","text":"true\n\nA type representing generic errors.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#JSMDInterfaces.Errors.NotImplementedError","page":"Interfaces","title":"JSMDInterfaces.Errors.NotImplementedError","text":"true\n\nA type representing not implemented errors.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#JSMDInterfaces.Errors.@module_error-Tuple{Any}","page":"Interfaces","title":"JSMDInterfaces.Errors.@module_error","text":"@module_error\n\nCreate a type representing an error associated to a specific module.\n\n\n\n\n\n","category":"macro"},{"location":"interfaces/#Ephemeris","page":"Interfaces","title":"Ephemeris","text":"","category":"section"},{"location":"interfaces/","page":"Interfaces","title":"Interfaces","text":"Modules = [JSMDInterfaces.Ephemeris]","category":"page"},{"location":"interfaces/#JSMDInterfaces.Ephemeris.AbstractEphemerisProvider","page":"Interfaces","title":"JSMDInterfaces.Ephemeris.AbstractEphemerisProvider","text":"AbstractEphemerisProvider\n\nAbstract type to represent ephemeris types.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#JSMDInterfaces.Ephemeris.EphemAxesRecord","page":"Interfaces","title":"JSMDInterfaces.Ephemeris.EphemAxesRecord","text":"EphemAxesRecord\n\nStore an orientation record metadata.\n\nFields\n\ntarget – NAIF ID of the target axes.\njd_start – Julian date of the first time.\njd_end – Julian date of the last time.\naxes – NAIF ID of the reference axes.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#JSMDInterfaces.Ephemeris.EphemPointRecord","page":"Interfaces","title":"JSMDInterfaces.Ephemeris.EphemPointRecord","text":"EphemPointRecord\n\nStore a position record metadata.\n\nFields\n\ntarget – NAIF ID of the target point.\ncenter – NAIF ID of the center point.\njd_start – Julian date of the first time.\njd_end – Julian date of the last time.\naxes – NAIF ID of the reference axes.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#JSMDInterfaces.Ephemeris.EphemerisError","page":"Interfaces","title":"JSMDInterfaces.Ephemeris.EphemerisError","text":"true\n\nA type representing ephemeris load or computations errors.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#JSMDInterfaces.Ephemeris.ephem_compute!-Union{Tuple{E}, Tuple{Any, E, Number, Number, Int64, Int64, Int64}} where E<:JSMDInterfaces.Ephemeris.AbstractEphemerisProvider","page":"Interfaces","title":"JSMDInterfaces.Ephemeris.ephem_compute!","text":"ephem_compute!(res, eph::E, jd0::Number, time::Number, target::Int, \n    center::Int, order::Int) where {E<:AbstractEphemerisProvider}\n\nAbstract method to compute ephemeris. \n\nAlgorithm\n\nCompute position and derivatives up to order of target with respect to center at epoch  jd0+time.\n\nArguments\n\neph – ephemeris\njd0 – jd0+time must be equal to the Julian Day for the time coordinate corresponding    to the ephemeris. \ntime – jd0+time must be equal to the Julian Day for the time coordinate corresponding    to the ephemeris. \ntarget – The body or reference point whose coordinates are required. \ncenter – The origin of the coordinate system. \norder – The order of derivatives from 0 (position) to 3 (position, velocity,    acceleration and jerk).\n\n\n\n\n\n","category":"method"},{"location":"interfaces/#JSMDInterfaces.Ephemeris.ephem_orient!-Union{Tuple{E}, Tuple{Any, E, Number, Number, Int64, Int64}} where E<:JSMDInterfaces.Ephemeris.AbstractEphemerisProvider","page":"Interfaces","title":"JSMDInterfaces.Ephemeris.ephem_orient!","text":"ephem_orient!(res, eph::E, jd0::Number, time::Number, target::Int, \n    order::Int) where {E<:AbstractEphemerisProvider}\n\nAbstract method to compute orientations.\n\nAlgorithm\n\nCompute Euler angles and derivatives up to order for the orientation of target at epoch      jd0 + time.\n\nArguments\n\neph: ephemeris\njd0: jd0+time must be equal to the Julian Day for the time coordinate corresponding to    the ephemeris.\ntime: jd0+time must be equal to the Julian Day for the time coordinate corresponding to    the ephemeris.\ntarget: The body whose orientation is required.\norder – The order of derivatives from 0 (position) to 3 (position, velocity,    acceleration and jerk).\n\n\n\n\n\n","category":"method"},{"location":"interfaces/#JSMDInterfaces.FilesIO.load-Tuple{Type{<:JSMDInterfaces.Ephemeris.AbstractEphemerisProvider}, Vararg{String}}","page":"Interfaces","title":"JSMDInterfaces.FilesIO.load","text":"load(::Type{<:AbstractEphemerisProvider}, files::String...)\n\nLoad ephemeris files.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/#Math","page":"Interfaces","title":"Math","text":"","category":"section"},{"location":"interfaces/","page":"Interfaces","title":"Interfaces","text":"Modules = [JSMDInterfaces.Math]\n","category":"page"},{"location":"interfaces/#JSMDInterfaces.Math.AbstractInterpolationMethod","page":"Interfaces","title":"JSMDInterfaces.Math.AbstractInterpolationMethod","text":"AbstractInterpolationMethod\n\nAbstract type representing any interpolation method.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#JSMDInterfaces.Math.interpolate-Tuple{JSMDInterfaces.Math.AbstractInterpolationMethod, Any}","page":"Interfaces","title":"JSMDInterfaces.Math.interpolate","text":"interpolate(::AbstractInterpolationMethod, x)\n\nAbstract interpolator call method.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/#FilesIO","page":"Interfaces","title":"FilesIO","text":"","category":"section"},{"location":"interfaces/","page":"Interfaces","title":"Interfaces","text":"Modules = [JSMDInterfaces.FilesIO]","category":"page"},{"location":"interfaces/#JSMDInterfaces.FilesIO.filepath-Tuple{JSMDInterfaces.FilesIO.AbstractFile, Int64}","page":"Interfaces","title":"JSMDInterfaces.FilesIO.filepath","text":"filepath(files::AbstractFile, idx::Int)\n\nReturn the path of the idx-th file within files.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/#JSMDInterfaces.FilesIO.filepaths-Tuple{JSMDInterfaces.FilesIO.AbstractFile}","page":"Interfaces","title":"JSMDInterfaces.FilesIO.filepaths","text":"filepaths(files::AbstractFile)\n\nReturn the path of all the files loaded within file.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/#JSMDInterfaces.FilesIO.load-Tuple{JSMDInterfaces.FilesIO.AbstractFile}","page":"Interfaces","title":"JSMDInterfaces.FilesIO.load","text":"load(files::T) where T <: AbstractFile\n\nGeneric loader of different file/s formats.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/#JSMDInterfaces.FilesIO.@filetype-Tuple{Any, Any}","page":"Interfaces","title":"JSMDInterfaces.FilesIO.@filetype","text":"filetype(ftype, suptype)\n\nCreate a type representing a specific file and the associated  filepaths and filepath implementations.\n\n\n\n\n\n","category":"macro"},{"location":"#JSMDInterfaces.jl","page":"Home","title":"JSMDInterfaces.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An interface package for the JSMD ecosystem","category":"page"},{"location":"","page":"Home","title":"Home","text":"SMDInterfacesUtils.jl handles all the interface definitions for the JSMD ecosystem. It is a low-level and low dependency library made to be  depended on by the higher-level libraries to supply a common interface.","category":"page"}]
}
