var documenterSearchIndex = {"docs":
[{"location":"api/#Math","page":"API","title":"Math","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [JSMDUtils.Math]\nOrder = [:type, :function]","category":"page"},{"location":"api/#JSMDUtils.Math.InterpAkima","page":"API","title":"JSMDUtils.Math.InterpAkima","text":"InterpAkima{T, N} <: AbstractInterpolationMethod\n\nType storing an Akima spline nodes and coefficient. T is the interpolation data type  and N is the spline dimension (i.e., the number of interpolated functions).\n\nFields\n\nn – Number of node points.\nxn – Interpolated node points. \nyn – Node points function values \nc – Akima polynomial coefficients. \n\n\n\n\n\n","category":"type"},{"location":"api/#JSMDUtils.Math.InterpAkima-Tuple{AbstractVector, AbstractArray}","page":"API","title":"JSMDUtils.Math.InterpAkima","text":"InterpAkima(x::AbstractVector, y::AbstractArray)\n\nConstruct an Akima spline interpolant from a set of data points x and their values y.  Multi-dimensional splines can be constructed passing y as a subtype of AbstractMatrix such  that each row contains a different set of values to be interpolated and the number of  columns equals the number of data points.\n\nReferences\n\nAkima, H. (1970),  A New Method of Interpolation and Smooth Curve Fitting Based on Local   Procedures, Journal of the ACM, DOI: \n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDUtils.Math.InterpCubicSplines","page":"API","title":"JSMDUtils.Math.InterpCubicSplines","text":"InterpCubicSplines(x::AbstractVector, y::AbstractArray, type::Symbol=:Natural)\n\nConstruct a cubic spline interpolant from a set of data points x and their values y.  Multi-dimensional splines can be constructed by passing y as a subtype of AbstractMatrix,  such that each row contains a different set of values to be interpolated and the number of  columns equals the number of data points.\n\nDifferent boundary conditions can be applied based on the specified type: \n\n:Natural: the second derivative of the first and the last polynomial are equal to    zero at the boundary points. \n:NotAKnot: the third derivatives of the first and last two polynomials are    equal in the points where they meet each other.\n:Periodic: the first and second derivatives at the initial and final points are equal.\n:Quadratic: the first and the last polynomial are quadratic. \n\n\n\n\n\n","category":"type"},{"location":"api/#JSMDUtils.Math.InterpCubicSplines-2","page":"API","title":"JSMDUtils.Math.InterpCubicSplines","text":"InterpCubicSplines{T, N} <: AbstractInterpolationMethod\n\nType storing a cubic spline nodes and coefficients. T is the spline data type and  N is the spline dimension (i.e., the number of interpolated functions). \n\nFields\n\nn – Number of node points.\nxn – Interpolated node points.\nyn – Node points function values. \nc –  Spline polynomials coefficients. \ntype – Boundary conditions type.\n\n\n\n\n\n","category":"type"},{"location":"api/#JSMDInterfaces.Math.interpolate-Union{Tuple{T}, Tuple{JSMDUtils.Math.InterpAkima{T, 1}, Number}, Tuple{JSMDUtils.Math.InterpAkima{T, 1}, Number, Bool}} where T","page":"API","title":"JSMDInterfaces.Math.interpolate","text":"interpolate(ak::InterpAkima, x::Number, flat::Bool=true)\n\nInterpolate the Akima spline ak at point x. If the spline has a single  dimension (e.g., InterpAkima{T, 1}), a scalar value is returned. Otherwise, an SVector is computed. \n\nIf x is outside the boundary range of sp a flat extrapolation is used by default.  If the flat argument is false, the first and last polynomials will be used to  compute all the outside values.\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.Math.interpolate-Union{Tuple{T}, Tuple{JSMDUtils.Math.InterpCubicSplines{T, 1}, Number}, Tuple{JSMDUtils.Math.InterpCubicSplines{T, 1}, Number, Bool}} where T","page":"API","title":"JSMDInterfaces.Math.interpolate","text":"interpolate(sp::InterpCubicSplines, x::Number, flat::Bool=true)\n\nInterpolate the cubic spline sp at point x. If the spline has a single  dimension (e.g., InterpCubicSpline{T, 1}), a scalar value is returned. Otherwise, an SVector is computed. \n\nIf x is outside the boundary range of sp a flat extrapolation is used by default.  If the flat argument is false, the first and last polynomials will be used to  compute all the outside values.\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDUtils.Math.D²-Tuple{Any, Any}","page":"API","title":"JSMDUtils.Math.D²","text":"D²(f, x::Real)\n\nReturn d²f/dx² evaluated at x using ForwardDiff, assuming f is called as f(x).\n\nThis method assumes that isa(f(x), Union{Real, AbstractArray}).\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDUtils.Math.D³-Tuple{Any, Any}","page":"API","title":"JSMDUtils.Math.D³","text":"D³(f, x::Real)\n\nReturn d³f/dx³ evaluated at x using ForwardDiff, assuming f is called as f(x).\n\nThis method assumes that isa(f(x), Union{Real, AbstractArray}).\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDUtils.Math.D¹-Tuple{Any, Any}","page":"API","title":"JSMDUtils.Math.D¹","text":"D¹(f, x::Real)\n\nReturn df/dx evaluated at x using ForwardDiff, assuming f is called as f(x).\n\nThis method assumes that isa(f(x), Union{Real, AbstractArray}).\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDUtils.Math.skew","page":"API","title":"JSMDUtils.Math.skew","text":"skew(v::AbstractArray{N}) where {N<:Number}\n\nCompute a skew-symmetric matrix from the vector v. \n\n\n\n\n\n","category":"function"},{"location":"api/#FileUtils","page":"API","title":"FileUtils","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [JSMDUtils.FileUtils]\nOrder = [:type, :function]","category":"page"},{"location":"api/#JSMDUtils.FileUtils.JSON","page":"API","title":"JSMDUtils.FileUtils.JSON","text":"JSMDUtils.FileUtils.JSON <: JSMDInterfaces.FilesIO.AbstractFile\n\nA type representing JSMDUtils.FileUtils.JSON files.\n\n\n\n\n\n","category":"type"},{"location":"api/#JSMDUtils.FileUtils.TXT","page":"API","title":"JSMDUtils.FileUtils.TXT","text":"JSMDUtils.FileUtils.TXT <: JSMDInterfaces.FilesIO.AbstractFile\n\nA type representing JSMDUtils.FileUtils.TXT files.\n\n\n\n\n\n","category":"type"},{"location":"api/#JSMDUtils.FileUtils.YAML","page":"API","title":"JSMDUtils.FileUtils.YAML","text":"JSMDUtils.FileUtils.YAML <: JSMDInterfaces.FilesIO.AbstractFile\n\nA type representing JSMDUtils.FileUtils.YAML files.\n\n\n\n\n\n","category":"type"},{"location":"api/#JSMDInterfaces.FilesIO.load-Tuple{JSMDUtils.FileUtils.JSON{1}}","page":"API","title":"JSMDInterfaces.FilesIO.load","text":"load(file::JSON{1})\n\nOpen a JSON file and parse its data in a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.FilesIO.load-Tuple{JSMDUtils.FileUtils.TXT{1}}","page":"API","title":"JSMDInterfaces.FilesIO.load","text":"load(file::TXT{1})\n\nOpen a TEXT file and parse its data in a list of strings.\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.FilesIO.load-Tuple{JSMDUtils.FileUtils.YAML{1}}","page":"API","title":"JSMDInterfaces.FilesIO.load","text":"load(file::YAML{1})\n\nOpen a YAML file and parse its data in a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/#Miscellaneous","page":"API","title":"Miscellaneous","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [JSMDUtils]\nOrder = [:type, :function]","category":"page"},{"location":"api/#JSMDUtils.NullEphemerisProvider","page":"API","title":"JSMDUtils.NullEphemerisProvider","text":"EmptyEphemerisProvider <: AbstractEphemerisProvider\n\nEmpty provider to initialise the frame system without loading  ephemeris files. \n\n\n\n\n\n","category":"type"},{"location":"api/#JSMDUtils.format_camelcase-Tuple{S} where S<:AbstractString","page":"API","title":"JSMDUtils.format_camelcase","text":"format_camelcase(str::AbstractString)\n\nFormat str in CamelCase, such that the first letter of each word  in the sentence is capitalized and spaces are removed.\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDUtils.format_snakecase-Tuple{S} where S<:AbstractString","page":"API","title":"JSMDUtils.format_snakecase","text":"format_snakecase(str::AbstractString)\n\nFormat str in SnakeCase, such that all the letters are in lower case and  spaces are replaced with underscores.\n\n\n\n\n\n","category":"method"},{"location":"#JSMDUtils.jl","page":"Home","title":"JSMDUtils.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A utily package for the JSMD ecosystem","category":"page"},{"location":"","page":"Home","title":"Home","text":"JSMDUtils.jl is a low-level package holding different utility functions and type  definitions that are reused by many packages within the JSMD ecosystem. ","category":"page"}]
}
