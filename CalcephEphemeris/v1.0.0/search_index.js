var documenterSearchIndex = {"docs":
[{"location":"#CalcephEphemeris.jl-API","page":"Home","title":"CalcephEphemeris.jl API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [CalcephEphemeris]\nOrder = [:type, :function]","category":"page"},{"location":"#CalcephEphemeris.CalcephProvider","page":"Home","title":"CalcephEphemeris.CalcephProvider","text":"CalcephProvider(file::String)\nCalcephProvider(files::Vector{String})\n\nCreate a CalcephProvider instance by loading a single or multiples ephemeris kernel  files specified by files.\n\nnote: Note\nSince this object is immutable, kernels cannot be added nor removed from the generated CalcephProvider instance.  \n\nExample\n\njulia> eph1 = CalcephProvider(\"PATH_TO_KERNEL\")\nCalcephProvider(CALCEPH.Ephem(Ptr{Nothing} [...]))\n\njulia> eph2 = CalcephProvider([\"PATH_TO_KERNEL_1\", \"PATH_TO_KERNEL_2\"])\nCalcephProvider(CALCEPH.Ephem(Ptr{Nothing} [...]))\n\n\n\n\n\n","category":"type"},{"location":"#SMDInterfacesUtils.Interfaces.Ephemeris.ephem_available_axes-Tuple{CalcephProvider}","page":"Home","title":"SMDInterfacesUtils.Interfaces.Ephemeris.ephem_available_axes","text":"ephem_available_points(eph::CalcephProvider)\n\nReturn a list of Frame IDs representing axes with available orientation data. \n\n\n\n\n\n","category":"method"},{"location":"#SMDInterfacesUtils.Interfaces.Ephemeris.ephem_available_points-Tuple{CalcephProvider}","page":"Home","title":"SMDInterfacesUtils.Interfaces.Ephemeris.ephem_available_points","text":"ephem_available_points(eph::CalcephProvider)\n\nReturn a list of NAIFIds representing bodies with available ephemeris data. \n\n\n\n\n\n","category":"method"},{"location":"#SMDInterfacesUtils.Interfaces.Ephemeris.ephem_compute!-Tuple{Any, CalcephProvider, Float64, Float64, Int64, Int64, Int64}","page":"Home","title":"SMDInterfacesUtils.Interfaces.Ephemeris.ephem_compute!","text":"ephem_compute!(res, eph, jd0, time, target, center, order)\n\nInterpolate the position and/or its derivatives up to order for one body target relative  to another center at the time jd0 + time, expressed as a Julian Date. This function reads  the ephemeris files associated to eph and stores the results to res.\n\nThe returned array res must be large enough to store the results. The size of this array  must be equal to 3*order: \n\nres[1:3] contain the position (x, y, z) and is always valid \nres[4:6] contain the velocity (dx/dt, dy/dt, dz/dt) for order ≥ 1 \nres[7:9] contain the acceleration (d²x/dt², d²y/dt², d²z/dt²) for order ≥ 2\nres[10:12] contain the jerk (d³x/dt³, d³y/dt³, d³z/dt³) for order ≥ 3\n\nThe values stores in res are always returned in km, km/s, km/s², km/s³\n\nSee also\n\nSee also ephem_orient!\n\n\n\n\n\n","category":"method"},{"location":"#SMDInterfacesUtils.Interfaces.Ephemeris.ephem_orient!-Tuple{Any, CalcephProvider, Float64, Float64, Int64, Int64}","page":"Home","title":"SMDInterfacesUtils.Interfaces.Ephemeris.ephem_orient!","text":"ephem_orient!(res, eph, jd0, time, target, order)\n\nInterpolate the orientation and its derivatives up to order for the target body at the  time jd0 + time, expressed as a Julian Date. This function reads the ephemeris files  associated to eph and stores the results to res.\n\nThe returned array res must be large enough to store the results. The size of this array  must be equal to 3*order: \n\nres[1:3] contain the angles \nres[4:6] contain the 1st derivative  for order ≥ 1 \nres[7:9] contain the 2nd derivative for order ≥ 2\nres[10:12] contain the 3rd derivative for order ≥ 3\n\nThe values stores in res are always returned in rad, rad/s, rad/s², rad/s³\n\nSee also\n\nSee also ephem_orient!\n\n\n\n\n\n","category":"method"},{"location":"#SMDInterfacesUtils.Interfaces.Ephemeris.ephem_orient_records-Tuple{CalcephProvider}","page":"Home","title":"SMDInterfacesUtils.Interfaces.Ephemeris.ephem_orient_records","text":"ephem_orient_records(eph::CalcephProvider)\n\nGet ephemeris an array of CALCEPH.OrientationRecords, providing detailed  informations on the content of the ephemeris file.\n\n\n\n\n\n","category":"method"},{"location":"#SMDInterfacesUtils.Interfaces.Ephemeris.ephem_position_records-Tuple{CalcephProvider}","page":"Home","title":"SMDInterfacesUtils.Interfaces.Ephemeris.ephem_position_records","text":"ephem_position_records(eph::CalcephProvider)\n\nGet an array of CALCEPH.PositionRecord, providing detailed informations on the content of  the ephemeris file.\n\n\n\n\n\n","category":"method"},{"location":"#SMDInterfacesUtils.Interfaces.Ephemeris.ephem_timescale-Tuple{CalcephProvider}","page":"Home","title":"SMDInterfacesUtils.Interfaces.Ephemeris.ephem_timescale","text":"ephem_timescale(eph::CalcephProvider)\n\nRetrieve Basic timescale associated with ephemeris handler eph.\n\n\n\n\n\n","category":"method"},{"location":"#SMDInterfacesUtils.Interfaces.Ephemeris.ephem_timespan-Tuple{CalcephProvider}","page":"Home","title":"SMDInterfacesUtils.Interfaces.Ephemeris.ephem_timespan","text":"ephem_timespan(eph::CalcephProvider)\n\nReturns the first and last time available in the ephemeris file associated to  an ephemeris file.\n\nInput/s:\n\neph : ephemeris\n\nOutput/s:\n\nReturns a tuple containing:\n\nfirsttime – Julian date of the first time\nlasttime – Julian date of the last time\ncontinuous – information about the availability of the quantities over the                  time span\nIt returns the following value in the parameter continuous :\n  1. if the quantities of all bodies are available for any time between \n      the first and last time.\n  2. if the quantities of some bodies are available on discontinuous time \n      intervals between the first and last time.\n  3. if the quantities of each body are available on a continuous time \n      interval between the first and last time, but not available for any \n      time between the first and last time.\n\n\n\n\n\n","category":"method"}]
}
